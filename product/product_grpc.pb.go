// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DiscountClient is the client API for Discount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscountClient interface {
	// Sends a greeting
	Discount(ctx context.Context, in *DiscountRequest, opts ...grpc.CallOption) (*DiscountReply, error)
}

type discountClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscountClient(cc grpc.ClientConnInterface) DiscountClient {
	return &discountClient{cc}
}

func (c *discountClient) Discount(ctx context.Context, in *DiscountRequest, opts ...grpc.CallOption) (*DiscountReply, error) {
	out := new(DiscountReply)
	err := c.cc.Invoke(ctx, "/product.Discount/Discount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscountServer is the server API for Discount service.
// All implementations must embed UnimplementedDiscountServer
// for forward compatibility
type DiscountServer interface {
	// Sends a greeting
	Discount(context.Context, *DiscountRequest) (*DiscountReply, error)
	mustEmbedUnimplementedDiscountServer()
}

// UnimplementedDiscountServer must be embedded to have forward compatible implementations.
type UnimplementedDiscountServer struct {
}

func (*UnimplementedDiscountServer) Discount(context.Context, *DiscountRequest) (*DiscountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discount not implemented")
}
func (*UnimplementedDiscountServer) mustEmbedUnimplementedDiscountServer() {}

func RegisterDiscountServer(s *grpc.Server, srv DiscountServer) {
	s.RegisterService(&_Discount_serviceDesc, srv)
}

func _Discount_Discount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountServer).Discount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Discount/Discount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountServer).Discount(ctx, req.(*DiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Discount_serviceDesc = grpc.ServiceDesc{
	ServiceName: "product.Discount",
	HandlerType: (*DiscountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Discount",
			Handler:    _Discount_Discount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
